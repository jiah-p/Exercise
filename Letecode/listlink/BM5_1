# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
#
# 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
#
# 
# @param lists ListNode类一维数组 
# @return ListNode类
#
class Solution:
    def mergeKLists(self , lists: List[ListNode]) -> ListNode:
        # write code here  
        # if len(lists) < 1:
        #     return None
        # 这个题目 其实难度不是归并排序或者排序的过程，
        # 主要是你得保证递归和合并都是同样的返回左边指针或者说节点
        def mergesort(lists,low,high):
            if low > high:  #这个情况就是特殊情况 len(lists) - 1 = -1
                return None
            if low == high:
                return lists[low]
            mid = (low+high) // 2   
            return merge(mergesort(lists,low,mid),mergesort(lists,mid+1,high))


        def merge(p1,p2):
            head = ListNode(0)
            cur = head
            while p1 and p2:
                if p1.val > p2.val:
                    cur.next = p2
                    p2 = p2.next
                else:
                    cur.next = p1
                    p1 = p1.next
                cur = cur.next
            if p1:
                cur.next = p1
            else:
                cur.next = p2
            
            return head.next
        
        return mergesort(lists,0, len(lists) -1)




