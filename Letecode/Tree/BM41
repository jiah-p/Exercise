#
# 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
#
# 求二叉树的右视图
# @param preOrder int整型一维数组 先序遍历
# @param inOrder int整型一维数组 中序遍历
# @return int整型一维数组
#
class Solution:
    def buildTree(self, preOrder, inOrder):
        # 首先这个情况发生只有在左或者右子树为空的情况
        if not preOrder or not inOrder:
            return None
        root = TreeNode(preOrder[0]) #先序 遍历的第一个值肯定是根的位置
        in_index = inOrder.index(root.val) #找在中序遍历中根的位置划分左右子树

        # 递归建立左右子树
        root.left = self.buildTree(preOrder[1:in_index+1], inOrder[:in_index])
        root.right = self.buildTree(preOrder[in_index+1:], inOrder[in_index+1:])

        return root
    def solve(self , preOrder: List[int], inOrder: List[int]) -> List[int]:
        # write code here
        root = self.buildTree(preOrder,inOrder)

        # 通过层序遍历打印右视图
        # q 依次记录每层所有节点的队列保证遍历了所有节点 应该可以根据标志位进行剪枝
        # layer 临时记录每一层的节点
        # ans保存每层的第一个遍历的节点的值
        q = [root]
        layer = []
        ans = []
        while q:
            while q: #当前层不为空则全部读入到layer中
                temp = q.pop(0)
                layer.append(temp)
            # 记录每层第一个进来的节点的值
            ans.append(layer[0].val)
            # 当层不为空的情况下，弹出层中每个节点并将其右子节点和左子节点 依次 加入下一层q
            while layer:
                temp = layer.pop(0)
                if temp.right:
                    q.append(temp.right)
                if temp.left:
                    q.append(temp.left)
        return ans
        # flag = True
        # while q:
        #     temp = q.pop(0)
        #     if flag:
        #         flag = False
        #         ans.append(temp.val)
        #     if not q:
        #         flag = True
        #     if temp.right:
        #         q.append(temp.right)
        #     if temp.left:
        #         q.append(temp.left)
            
        # return ans




