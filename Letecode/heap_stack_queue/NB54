import heapq


class Solution:
    def findMedianPrice(self, prices):
        # 最小堆，用于存储较大的一半数字
        min_heap = []
        # 最大堆，用于存储较小的一半数字
        max_heap = []
        # 用于存储结果的列表
        medians = []

        for price in prices:
            # 将新价格添加到最大堆
            heapq.heappush(max_heap, -price)
            # 如果最大堆的顶部元素（即最大元素）大于最小堆的顶部元素，调整两个堆
            if min_heap and -max_heap[0] > min_heap[0]:
                val = -heapq.heappop(max_heap)
                heapq.heappush(min_heap, val)
            # 如果最大堆的大小超过最小堆的大小超过1，移动堆顶元素到最小堆
            if len(max_heap) > len(min_heap) + 1:
                val = -heapq.heappop(max_heap)
                heapq.heappush(min_heap, val)
            # 如果最小堆的大小大于最大堆，移动堆顶元素到最大堆
            if len(min_heap) > len(max_heap):
                val = heapq.heappop(min_heap)
                heapq.heappush(max_heap, -val)
            # 根据两个堆的大小，计算中位数并添加到结果列表
            if len(max_heap) > len(min_heap):
                medians.append(float(-max_heap[0]))
            else:
                medians.append((-max_heap[0] + min_heap[0]) / 2)

        return medians


# 用法示例
sol = Solution()
print(sol.findMedianPrice([1, 2, 3]))
